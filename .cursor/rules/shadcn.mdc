---
description: 
globs: *.svelte
alwaysApply: false
---
---
description: "Use shadcn-svelte components as needed for any UI code"
patterns: "*.svelte"
---

# shadcn-svelte Components

This project uses [shadcn-svelte](mdc:https:/shadcn-svelte.com) for UI components. These are beautifully designed, accessible components that you can copy and paste into your apps.

## Finding and Using Components

Components are available in the `src/lib/components/ui` directory, following the aliases configured in `components.json`.

## Using Components

There are two ways to import and use shadcn-svelte components:

### Method 1: Individual Named Imports

```svelte
<script>
  import { Button } from "$lib/components/ui/button";
  import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "$lib/components/ui/card";
</script>

<Button variant="outline">Click me</Button>

<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card Description</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Card Content</p>
  </CardContent>
  <CardFooter>
    <p>Card Footer</p>
  </CardFooter>
</Card>
```

### Method 2: Namespace Imports (Recommended)

This is the method most commonly used with shadcn-svelte:

```svelte
<script lang="ts">
  import * as Card from "$lib/components/ui/card/index.js";
</script>

<Card.Root>
  <Card.Header>
    <Card.Title>Card Title</Card.Title>
    <Card.Description>Card Description</Card.Description>
  </Card.Header>
  <Card.Content>
    <p>Card Content</p>
  </Card.Content>
  <Card.Footer>
    <p>Card Footer</p>
  </Card.Footer>
</Card.Root>
```

#### Tabs Component Example:

```svelte
<script lang="ts">
  import * as Tabs from "$lib/components/ui/tabs/index.js";
</script>

<Tabs.Root value="account" class="w-[400px]">
  <Tabs.List>
    <Tabs.Trigger value="account">Account</Tabs.Trigger>
    <Tabs.Trigger value="password">Password</Tabs.Trigger>
  </Tabs.List>
  <Tabs.Content value="account">
    Make changes to your account here.
  </Tabs.Content>
  <Tabs.Content value="password">Change your password here.</Tabs.Content>
</Tabs.Root>
```

#### Select Component Example:

```svelte
<script lang="ts">
  import * as Select from "$lib/components/ui/select/index.js";
</script>

<Select.Root type="single">
  <Select.Trigger class="w-[180px]"></Select.Trigger>
  <Select.Content>
    <Select.Item value="light">Light</Select.Item>
    <Select.Item value="dark">Dark</Select.Item>
    <Select.Item value="system">System</Select.Item>
  </Select.Content>
</Select.Root>
```

#### Form Component Example with SuperForms:

```svelte
<script lang="ts">
  import * as Form from "$lib/components/ui/form/index.js";
  import { Input } from "$lib/components/ui/input/index.js";
  import { formSchema, type FormSchema } from "./schema";
  import {
    type SuperValidated,
    type Infer,
    superForm,
  } from "sveltekit-superforms";
  import { zodClient } from "sveltekit-superforms/adapters";

  let { data }: { data: { form: SuperValidated<Infer<FormSchema>> } } = $props();

  const form = superForm(data.form, {
    validators: zodClient(formSchema),
  });

  const { form: formData, enhance } = form;
</script>

<form method="POST" use:enhance>
  <Form.Field {form} name="username">
    <Form.Control>
      {#snippet children({ props })}
        <Form.Label>Username</Form.Label>
        <Input {...props} bind:value={$formData.username} />
      {/snippet}
    </Form.Control>
    <Form.Description>This is your public display name.</Form.Description>
    <Form.FieldErrors />
  </Form.Field>
  <Form.Button>Submit</Form.Button>
</form>
```

## Installing Additional Components

Many more components are available but not currently installed. You can view the complete list at https://shadcn-svelte.com/docs/components

To install additional components, use the Shadcn CLI:

```bash
npx shadcn-svelte@latest add [component-name]
```

For example, to add the Accordion component:

```bash
npx shadcn-svelte@latest add accordion
```

## Component Registry

Some commonly used components are:

- Accordion
- Alert
- AlertDialog
- AspectRatio
- Avatar
- Calendar
- Checkbox
- Collapsible
- Command
- ContextMenu
- DataTable
- DatePicker
- DropdownMenu
- Form
- HoverCard
- Menubar
- NavigationMenu
- Popover
- Progress
- RadioGroup
- ScrollArea
- Select
- Separator
- Sheet
- Skeleton
- Slider
- Switch
- Table
- Textarea
- Toast
- Toggle
- Tooltip

## Component Styling

This project uses the "new-york" style variant with the "neutral" base color and CSS variables for theming, as configured in `components.json`.

## Common Mistakes to Avoid

When working with shadcn-svelte, be aware of these common pitfalls:

1. **Import Path Suffixes**: Always include the `/index.js` suffix when using namespace imports:
   ```svelte
   // Correct
   import * as Card from "$lib/components/ui/card/index.js";
   
   // Incorrect
   import * as Card from "$lib/components/ui/card";
   ```

2. **Component Naming**: Use the correct component structure:
   - For namespace imports, components are accessed with dot notation (`Card.Root`, `Card.Header`)
   - The main container component is usually named `Root` (like `Card.Root`, `Select.Root`)

3. **Snippets vs Slots**: shadcn-svelte often uses Svelte 5's snippets feature instead of slots for certain components, especially in form controls:
   ```svelte
   <Form.Control>
     {#snippet children({ props })}
       <Form.Label>Username</Form.Label>
       <Input {...props} bind:value={$formData.username} />
     {/snippet}
   </Form.Control>
   ```

## Tailwind Integration

shadcn-svelte components are built with Tailwind CSS. Make sure your `tailwind.config.js` includes the necessary paths and plugins:

```js
/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: [
    './src/**/*.{html,js,svelte,ts}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      // Your theme extensions here
    },
  },
  plugins: [require("tailwindcss-animate")],
}
```